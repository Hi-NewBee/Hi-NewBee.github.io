<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NEWBEE</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-21T10:32:31.091Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>NewBee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>团队服务器搬迁-Docker运用</title>
    <link href="http://yoursite.com/2017/02/21/%E5%9B%A2%E9%98%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AC%E8%BF%81-Docker%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2017/02/21/团队服务器搬迁-Docker运用/</id>
    <published>2017-02-21T07:24:44.000Z</published>
    <updated>2017-02-21T10:32:31.091Z</updated>
    
    <content type="html"><![CDATA[<p>之前一段时间团队服务器搬迁,因为最近Docker运用很火,所以我决定用docker为团队服务器上的几个web应用进行管理,方便之后的服务器转移.</p>
<h2 id="为什么要使用-Docker？"><a href="#为什么要使用-Docker？" class="headerlink" title="为什么要使用 Docker？"></a>为什么要使用 <a href="https://yeasy.gitbooks.io/docker_practice/content/introduction/why.html" target="_blank" rel="external">Docker</a>？</h2><ul>
<li>更高效的利用系统资源</li>
<li>更快速的启动时间</li>
<li>一致的运行环境</li>
<li>持续交付和部署</li>
<li>更轻松的迁移</li>
<li>更轻松的维护和扩展</li>
</ul>
<h2 id="理解Docker"><a href="#理解Docker" class="headerlink" title="理解Docker"></a>理解Docker</h2><p>&emsp;&emsp;要理解Docker,首先就需要提到镜像和容器的概念.</p>
<p>&emsp;&emsp;镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
<p>&emsp;&emsp;容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会把容器和虚拟机搞混。</p>
<p>&emsp;&emsp;镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。<br>&emsp;&emsp;容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>
<p>&emsp;&emsp;按照<a href="http://dockone.io/article/161" target="_blank" rel="external"> Docker 最佳实践</a>的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>
<p>&emsp;&emsp;数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新 run，数据却不会丢失。</p>
<h2 id="搬迁步骤"><a href="#搬迁步骤" class="headerlink" title="搬迁步骤"></a><a href="https://doliawu.com/2016/08/08/cfc-server-migrate/" target="_blank" rel="external">搬迁步骤</a></h2><p>团队服务器上的web应用我大概分为了3个部分:静态网页(<a href="https://crazyforcode.org" target="_blank" rel="external">官网</a>和一些网站),<a href="https://git.crazyforcode.org" target="_blank" rel="external">团队git</a>和<a href="https://blog.crazyforcode.org" target="_blank" rel="external">团队blog</a>.<br>&emsp;&emsp;<br>&emsp;&emsp;静态网页的东西可以直接打包解压,配置一下nginx就行.<br>&emsp;&emsp;<br>&emsp;&emsp;然后团队git和团队blog都有数据库,所以按照docker最佳实践,sql也应该单独运行于一个容器.</p>
<pre><code class="docker">docker run --name cfc-mysql -e MYSQL_ROOT_PASSWORD=* -d -v /home/mysql:/var/lib/mysql -p *:3306 mysql
</code></pre>
<p>&emsp;&emsp;运用docker 中的volume挂载数据到服务器上<br>&emsp;&emsp;<br>&emsp;&emsp;团队git,头像等数据在gogs-data文件夹下,仓库数据在gogs文件夹下等,需要打包后转移然后用volume挂载同步.</p>
<pre><code class="docker">docker run --name cfc-git -d -v * --link cfc-mysql:mysql -p *:3000 -p *:22 gogs/gogs
</code></pre>
<p>&emsp;&emsp;同样团队的blog也差不多(博客的文件夹在blog.crazyforcode.org下).<br>&emsp;&emsp;<br>&emsp;&emsp;因为我们使用了docker容器,而它可以看做一个进程,所以他会占用资源和端口,所以我们采取主机端口映射,然后我们就需要用到<a href="https://github.com/moonbingbing/openresty-best-practices/blob/master/ngx/reverse_proxy.md" target="_blank" rel="external">nginx反代</a>,暴露其他端口让容器接受请求并返回.</p>
<blockquote>
<p><em>ps:记得修改文件夹权限!!!以上*号可自由发挥</em></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一段时间团队服务器搬迁,因为最近Docker运用很火,所以我决定用docker为团队服务器上的几个web应用进行管理,方便之后的服务器转移.&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用-Docker？&quot;&gt;&lt;a href=&quot;#为什么要使用-Docker？&quot; class=&quot;hea
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL注入攻防</title>
    <link href="http://yoursite.com/2016/10/11/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E9%98%B2/"/>
    <id>http://yoursite.com/2016/10/11/SQL注入攻防/</id>
    <published>2016-10-11T05:52:41.000Z</published>
    <updated>2017-02-21T10:35:17.879Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近上线一个团队网站，我是用php写的后台，最开始的时候没有关于SQL注入的深度认知，结果在团队学长测试的时候被成功注入了……2333，所以最近就学习了SQL注入的相关内容。</p>
<h2 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h2><p>&emsp;&emsp;所谓SQL注入式攻击，就是攻击者把SQL命令插入到Web表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的SQL命令。在某些表单中，用户输入的内容直接用来构造（或者影响）动态SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击。</p>
<h2 id="如何SQL注入"><a href="#如何SQL注入" class="headerlink" title="如何SQL注入"></a>如何SQL注入</h2><h3 id="一个简单的登录页面"><a href="#一个简单的登录页面" class="headerlink" title="一个简单的登录页面"></a>一个简单的登录页面</h3><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><pre><code class="php">$password = $_POST[&#39;password&#39;]; //admin
$username = $_POST[&#39;username&#39;]; //123456
$query = &#39;select * from pw where username = &#39;{$username}&#39; and password = &#39;{$password}&#39;&#39;;
$result = mysqli_query($link, $query);
if(mysqli_num_rows($result) == 1){
    echo &quot;&lt;script&gt;alert(&#39;存在指定用户&#39;);&lt;/script&gt;&quot;;
}else{
    echo &quot;&lt;script&gt;alert(&#39;查无此账户&#39;);&lt;/script&gt;&quot;;
    return;
}
</code></pre>
<h4 id="1-正常输入数据"><a href="#1-正常输入数据" class="headerlink" title="1) 正常输入数据"></a>1) 正常输入数据</h4><p>&emsp;&emsp;同时输入”admin”和”123456”，才能登陆成功。</p>
<h4 id="2-简单的SQL注入方式输入"><a href="#2-简单的SQL注入方式输入" class="headerlink" title="2) 简单的SQL注入方式输入"></a>2) 简单的SQL注入方式输入</h4><p>&emsp;&emsp;输入”admin’–”和任意的一串密码(或者不输密码)</p>
<pre><code class="php">select * from pw where username = &#39;admin&#39; -- and password = &#39;123&#39;;
</code></pre>
<p>&emsp;&emsp;这里的”–”会注释掉后面的代码，所以登陆也会成功!</p>
<p>&emsp;&emsp;在这里我就不举例所有的SQL注入攻击方式了,有兴趣可以看看 <a href="http://www.cnblogs.com/heyuquan/archive/2012/10/31/2748577.html" target="_blank" rel="external">这里</a></p>
<h2 id="防止SQL注入"><a href="#防止SQL注入" class="headerlink" title="防止SQL注入"></a>防止SQL注入</h2><p>&emsp;&emsp;其实说来防止SQL注入的方式也不难，官方文档给出了一个方法 <a href="http://php.net/manual/zh/mysqli.real-escape-string.php" target="_blank" rel="external">mysqli_real_escape_string</a> ，作用是将敏感字符转义.但是最尴尬的是，这个函数仍无法完全防止SQL注入。</p>
<p>&emsp;&emsp;所以我们有必要使用参数化模式来构造sql语句。比如上例中，sql语句应该改为:</p>
<pre><code class="php">$mysqli = new mysqli(&#39;localhost&#39;,&#39;数据库用户&#39;,&#39;数据库密码&#39;,&#39;数据库名称&#39;);
$mysqli-&gt;set_charset(&#39;utf8&#39;);
$sql = &quot;select * from pw where username = ? and password = ?&quot;;
$stmt = $mysqli-&gt;prepare($sql);
$stmt-&gt;bind_param(&#39;ss&#39;,$_POST[&#39;username&#39;],$_POST[&#39;password&#39;]);
</code></pre>
<p>如此来动态构造sql语句，就能有效地防止SQL注入，这个方法叫做mysqli。<br>&emsp;&emsp;<br>&emsp;&emsp;还有一种PDO方式，我还没有使用过，在这我贴一下简例:</p>
<pre><code class="php">$stmt  =  $dbh -&gt; prepare ( &quot;INSERT INTO REGISTRY (name, value) VALUES (:name, :value)&quot; );
$stmt -&gt; bindParam ( &#39;:name&#39; ,  $name );
$stmt -&gt; bindParam ( &#39;:value&#39; ,  $value );
$name  =  &#39;one&#39; ;
$value  =  1 ;
$stmt -&gt; execute ();
</code></pre>
<p>&emsp;&emsp;</p>
<p>&emsp;&emsp;综上所诉，SQL注入很基础，却又有很大的风险，但其实任何开发中，参数化语句都十分常用，所以在编写sql语句时也应如此，就能避免风险!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;最近上线一个团队网站，我是用php写的后台，最开始的时候没有关于SQL注入的深度认知，结果在团队学长测试的时候被成功注入了……2333，所以最近就学习了SQL注入的相关内容。&lt;/p&gt;
&lt;h2 id=&quot;什么是SQL注入&quot;&gt;&lt;a href=&quot;#什么是SQ
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创造一个属于自己的Hexo主题</title>
    <link href="http://yoursite.com/2016/09/27/creat-a-hexo-theme/"/>
    <id>http://yoursite.com/2016/09/27/creat-a-hexo-theme/</id>
    <published>2016-09-27T06:09:33.000Z</published>
    <updated>2017-02-21T10:34:16.545Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是我第二次设计自己的Hexo主题，终于在无数的坑中完成得差不多了。。。<br>&emsp;&emsp;第一次的设计的  <a href="https://github.com/newbee-7/personal-hexo" target="_blank" rel="external">那个主题</a>  ，由于没有明确的思路，代码写的很乱，设计没有考虑，所以有很多蜜汁bug→_→，然后就放下了。<br>&emsp;&emsp;不说废话了，接下来就看看怎么写一个自己的主题。</p>
<h2 id="Theme文件夹布局"><a href="#Theme文件夹布局" class="headerlink" title="Theme文件夹布局"></a>Theme文件夹布局</h2><ul>
<li>|—— layout        //文件夹用来存放 .ejs模板</li>
<li>|—— source        //文件夹用来存放资源文件(css,js,…)</li>
<li>|—— _config.yml    //主题配置文件</li>
</ul>
<h2 id="主要原理"><a href="#主要原理" class="headerlink" title="主要原理"></a>主要原理</h2><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>&emsp;&emsp;首先进入layout文件夹,先创建一个 layout.ejs ——&gt; 这是主题的主要布局.</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;zh-CN&quot;&gt;
&lt;!-- Head tag --&gt;
&lt;%- partial(&#39;_partial/head&#39;) %&gt;
&lt;body&gt;
&lt;!-- Header --&gt;
&lt;%- partial(&#39;_partial/header&#39;) %&gt;
&lt;!-- Main Content --&gt;
&lt;%- body %&gt;
&lt;!-- After footer scripts --&gt;
&lt;%- partial(&#39;_partial/after-footer&#39;) %&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>这里的 &lt;%- body %&gt; 用来替换对应的页面，Hexo提供了6个主页面：</p>
<ul>
<li>|——index    //首页</li>
<li>|——post    //文章</li>
<li>|——page    //与post相同，不过类型type:page</li>
<li>|——archive    //文章的归档</li>
<li>|——category    //分类</li>
<li>|——tag    //标签</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>&emsp;&emsp;在所有的页面中，我们都需要用到一些  <a href="https://hexo.io/docs/variables.html" target="_blank" rel="external">变量</a>  :</p>
<h4 id="SITE"><a href="#SITE" class="headerlink" title="- SITE"></a>- SITE</h4><p>&emsp;&emsp;site 变量包含整个站点的信息。举个栗子，我们可以通过 site.posts 访问所有的文章。这个变量通常来现实一些统计数据。</p>
<h4 id="PAGE"><a href="#PAGE" class="headerlink" title="- PAGE"></a>- PAGE</h4><p>&emsp;&emsp;page 是主要变量，包含了很多与当前页面相关的信息，包括所有的文章标题、日期、内容等。<br>&emsp;&emsp;那个对象的属性取决于我们在哪个页面模板（首页、文章、归档）。</p>
<h4 id="CONFIG"><a href="#CONFIG" class="headerlink" title="- CONFIG"></a>- CONFIG</h4><p>&emsp;&emsp;config 是一个对象用来表示整个Hexo中 _config.yml 文件的信息。</p>
<h4 id="THEME"><a href="#THEME" class="headerlink" title="- THEME"></a>- THEME</h4><p>&emsp;&emsp;theme 是一个对象用来表示这个主题中 _config.yml 文件的信息。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>&emsp;&emsp;函数的信息可以去  <a href="https://hexo.io/zh-cn/docs/helpers.html" target="_blank" rel="external">官方文档</a>  上查看。<br>&emsp;&emsp;在这我主要是想提醒一下传参，上面的变量都是全局变量，只能在Hexo提供的6个模板页上使用，如果要在自己的（比如_partial文件夹里）页面使用，那么就需要把其传入，举个栗子:</p>
<pre><code class="ejs">&lt;%- partial(&#39;_partial/own-index&#39;, { posts: site.posts } ) %&gt;
</code></pre>
<p>&emsp;&emsp;这样，我们才能在自己的页面上使用这个变量。</p>
<h4 id="lt-–-第一次写博文，很紧张啊，2333！–-gt"><a href="#lt-–-第一次写博文，很紧张啊，2333！–-gt" class="headerlink" title="&lt;– 第一次写博文，很紧张啊，2333！–&gt;"></a>&lt;– 第一次写博文，很紧张啊，2333！–&gt;</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这是我第二次设计自己的Hexo主题，终于在无数的坑中完成得差不多了。。。&lt;br&gt;&amp;emsp;&amp;emsp;第一次的设计的  &lt;a href=&quot;https://github.com/newbee-7/personal-hexo&quot; target=&quot;_bla
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/09/19/hello-world/"/>
    <id>http://yoursite.com/2016/09/19/hello-world/</id>
    <published>2016-09-18T16:00:00.000Z</published>
    <updated>2016-09-19T06:56:43.409Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
